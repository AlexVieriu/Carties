7. Introduction Section 2 

-> creating a simple API for Auctions 
-> CRUD
-> Seeding Data (with Postgres)
-> using Docker compose
-> using Postman to test the API

7_.png

Open the documentation
ii 'D:\Programare\Proiecte\Micro with NextJS\CourseAssets\specs\auctionSvcSpec.pdf'


8. Creating the first microservice

https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-8.0&tabs=visual-studio-code

mkdir Carsties
cd Carsties
dotnet --info
dotnet new list
dotnet new sln
ls
dotnet new webapi --use-controllers -o src/AuctionService (error, could't find package OpenAPI 8.0 RC2 -> Nearest version: 8.0.0-rc.1.23421.29)
ls
ls src
dotnet sln add src/AuctionService (add project to the solution)
code .


9. Reviewing and simplifying the project

-- ActionService.csproj --
<Nullable>disable</Nullable>
remove packages OpenAPI, Swashbuckle

-- launchSettings.json --
remove "iisSettings"
remove "https"
remove "IIS Express"

"http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,                     -- change to false
      "applicationUrl": "http://localhost:7001",  -- change to port 7001
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
}

-- appsettings.Development.json --
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information" 
    }
  }
}

"Microsoft.AspNetCore": "Information" -> give information about the DB queries

Trace	      0	LogTrace	      Contain the most detailed messages. These messages may contain sensitive app data. These messages are disabled by default and should not be enabled in production.
Debug	      1	LogDebug	      For debugging and development. Use with caution in production due to the high volume.
Information	2	LogInformation	Tracks the general flow of the app. May have long-term value.
Warning	    3	LogWarning	    For abnormal or unexpected events. Typically includes errors or conditions that don't cause the app to fail.
Error	      4	LogError	      For errors and exceptions that cannot be handled. These messages indicate a failure in the current operation or request, not an app-wide failure.
Critical	  5	LogCritical	    For failures that require immediate attention. Examples: data loss scenarios, out of disk space.
None	      6	                Specifies that a logging category shouldn't write messages.

-- Program.cs --

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddEndpointsApiExplorer();

var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseAuthentication();
app.MapControllers();

app.Run();

open the terminal: ctrl + `
dotnet watch

change folder: ctrl + ,


10. Add the entity classes
From the folder project not from Solution Explorer (tab on the left)

Entities
  -> Auction.cs
  -> Item.cs
  -> Status.cs (enum)


11. Adding the Database context class
-> install "Nuget Gallery" extension
ctrl + shift + p -> Nuget Gallery
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Design
Npgsql.EntityFrameworkCore.PostgreSQL
AutoMapper.Extensions.Microsoft.DependencyInjection

-- GlobalUsing.cs --
Data      -> ActionDbContext.cs (Auctions)
          -> make a new class with field DbSet<Auction> Auctions

Entities  -> Item.cs ( [Table("Items")])
          -> mark the class as a table with table name "Items"

-> create the connection string: 
"DefaultConnection":"Server=localhost:5432;User Id=postgres;Password=postgrespw;Database=Auctions"

-> add Postgres service to Program.cs: 
builder.Services.AddDbContext<AuctionDbContext>(opt=>
{
    opt.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
});

-> install .net ef tool 
dotnet tool list -g
dotnet tool uninstall dotnet-ef -g (-g is for global)
dotnet tool install dotnet-ef -g --version 8.0.0-rc.1.23419.6
dotnet tool install dotnet-ef -g (-g is for global, the last stable release)
dotnet tool update dotnet-ef -g

-> add migration
dotnet ef migrations add "InitialCreate" -o Data/Migrations
dotnet ef migrations list
https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/managing?tabs=dotnet-core-cli#remove-a-migration

https://stackoverflow.com/questions/22680446/entity-framework-rollback-and-remove-bad-migration

1. Restore your database to the last good migration 
dotnet ef database update <name of last good migration>

2. Delete the bad migration from your Entity Framework project.
dotnet ef remove <name of the bad migration>

3. Generate a new migration and apply it to the database.
dotnet ef migrations add <name of the good new change migration>
dotnet ef database update <name of the good new change migration>


12. Adding a Postgres database server 

-- Carsties-> docker-compose.yml --
services:
  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: postgrespw
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
volumes:
  pgdata:

Powershell:
docker compose up -d 

Carsties-> src -> AuctionService
cd "D:\Programare\Proiecte\Micro with NextJS\Main Project\Carsties\src\AuctionService"

dotnet ef database update

add PostgreSQL to VSC

Postgres new connection:
server: localhost
user  : postgres
pass  : postgrespw
port  : 5432
ssl   : Standard
DB    : Auctions
DB con: localhost


13. Creating seed data
Data -> DbInitializer.cs 

create: static void InitDb(WebApplication app)
get the scope of the Services
CreateScope() : A Microsoft.Extensions.DependencyInjection.IServiceScope that can 
                be used to resolve scoped services

context.Database.Migrate()     
  - applies any pending migrations for the context to the database
  - will create the database if it does not already exist

context.AddRange(auctions)
  - begins tracking the given entities, and any other reachable entities
    that are not already being tracked

get the List of Actions from here 
ii "D:\Programare\Proiecte\Micro with NextJS\CourseAssets\snippets\auctionsSeed.txt"
dotnet ef database drop 
dotnet ef database update
dotnet watch 

-- Program.cs -- 
DbInitializer.InitDb(app);
app.Run();

14. Shaping the data to return
!!! de intrat mai adanc in AutoMapper !!
https://docs.automapper.org/en/stable/Getting-started.html

DTOs -> ActionDto.cs 
     -> CreateAuctionDto
     -> UpdateAuctionDto

RequestHelpers -> MappingProfiles.cs

-- Program.cs --
builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());


15. Adding API controller

-- Controller -> AuctionsController.cs --

Creating automatic private field from ctor with _
.editorconfig
ii "D:\Programare\Proiecte\Micro with NextJS\CourseAssets\snippets\editorconfig.txt"

Create Actions:

[HttpGet]
public async Task<ActionResult<List<AuctionDto>>> GetAllAuctions()
{
  // get all auctions using AuctionDbContext
  // include the class Item in the selection
  // order by field Make
  // map the auctions to the auctionDto
}

[HttpGet("{id}")]
public async Task<ActionResult<AuctionDto>> GetAuctionById(Guid id)
{
  // get the auctions by id
  // FirstOrDefaultAsync
  return NotFound() or map the action to actionDto
}

Test with Postman 
-> run docker with the Postgres container
http://localhost:7001/api/auctions
http://localhost:7001/api/auctions/6a5011a1-fe1f-47df-9a32-b5346b289391

-> create Tests in Postman for GetAllAuctions()
-> create Tests in Postman for GetAuctionById()


16. Adding a postman collection

Adding alias to the URL in Postman
-> click on the collection LVL(Microservices NextJS) -> Variables -> add alias :
    -> Variable: auctionApi
    -> Initial value: http://localhost:7001
    -> Current value: http://localhost:7001  

Add the collection from the documentation
ii "D:\Programare\Proiecte\Micro with NextJS\CourseAssets\postman"
Postman -> File -> Import -> Files -> D:\Programare\Proiecte\Micro with NextJS\CourseAssets\postman

Testing in Postman
https://learning.postman.com/docs/writing-scripts/script-references/test-examples/

Full detailed of the request
-> click on "Console" on the left bottom of Postman

View other options in Postman in Carsties collection
-> Body
-> Pre-request Script

Run all the Actions from Postman with tests
-> click on the folder Section 2 -> Run


17. Adding the create auction endpoint

Task<ActionResult<CreateAuctionDto>> CreateAuction(CreateAuctionDto createAuctionDto)

-> create Pre-requestScript in Postman with {{dateString}}
-> create Test in Postman

// the auction.Id is autogenerated by EF after the .Add method
// if we look in the migration folder there is a .ValueGeneratedOnAdd() method
CreatedAtAction(nameof(GetAuctionById), new { auction.Id }, _mapper.Map<AuctionDto>(auction))

18. Adding the update auction request

[HttpPut("{id}")]
Task<ActionResult> UpdateAuction(Guid id, UpdateAuctionDto updateAuctionDto)

-> add tests to Postman 


19. Adding the delete auction endpoint

[HttpDelete("{id}")]
public async Task<ActionResult> DeleteAuction(Guid id)

-> postman for delete: {{auctionApi}}/api/auctions/{{createdItemId}}
-> add tests for delete endpoint in Postman

-> create a Get to check delete in postman: {{auctionApi}}/api/auctions/{{createdItemId}} 
-> add tests in postman 

Click on the Folder(Section 2) and run all Actions

20. Saving changes into source control

git config --global user.email "vieriu.alexandru.25@gmail.com"
git config --global user.name "AlexVieriu"
git init
dotnet new gitignore
git add .
git commit -m "End of section 2"
git remote add origin https://github.com/AlexVieriu/Carsties.git
git push origin main


21. Summary


