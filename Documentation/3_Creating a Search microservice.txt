22. Section 3
-> create a Search Service
-> adding MongoDB
-> sync communication between Services

23. Creating the second microservice
-> we don't share DBs between microservices !!!

Documentation 
ii "D:\Programare\Proiecte\Micro with NextJS\CourseAssets\specs\searchSvcSpec.pdf"  (local)
code "Documentation\CourseAssets\specs\searchSvcSpec.pdf"                           (project)

dotnet new webapi --use-controllers -o src/SearchService
dotnet sln add src/SearchService

-- Program.cs --
delete swagger things
delete httpredirect

-- launchSettings.json --
{
  "$schema": "http://json.schemastore.org/launchsettings.json",  
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:7002",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }        
  }
}

-- appsettings.json -- 
"Microsoft.AspNetCore": "Information"

-- SearchService.csproj -- 
-> delete Swagger package 
-> <Nullable>disable</Nullable>

-> delete the WeatherForecast Controller

Adding packages
ctrl + shift + p -> Nuget Gallery
MongoDB.Entities
AutoMapper.Extensions.Microsoft.DependencyInjection

cd SearchService
dotnet build
dotnet watch
ctrl + C


24. Adding the MongoDB server 

-> add mongo db container
https://hub.docker.com/_/mongo

-- Carsties -> docker-compose.yml --
services:
  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: postgrespw
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
  mongodb:
    image: mongo
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
    ports:
      - 27017:27017
    volumes:
      - mongodata:/var/lib/mongodb/data 

volumes:
  pgdata:
  mongodata:

-> for more information about the environmentVariables for MongoDB
search on the link above "Environment Variables"
-> 27017  -> in the LEFT is the external port
          -> in the RIGHT is the internal port

ii . 
cd "D:\Programare\Proiecte\Micro with NextJS\Main Project\Carsties"
docker compose up -d

-> check if the MongoDb is up and running on Docker
-> if not, check the 

- add MongoDb for VS Code extension 
- connect to Mongo -> Advanced Connection Settings
username: root
pass    : mongopw


Extra knowledge from Udemy questions:
-> multiple volumes on a Docker container
https://www.baeldung.com/ops/docker-mounting-multiple-volumes#:~:text=Docker%20has%20multiple%20options%20to,bind%20them%20to%20specific%20paths.


25. Adding the Item model

GlobalUsing.cs
Models-> Item.cs -> copy class from AuctionService-> DTOs -> AuctionDto.cs(without the id)

-> we don't need to give it an id because is coming from Entity (MongoDB.Entities.Entity)

-- Program.cs --
await DB.InitAsync("SearchDB", MongoClientSettings
.FromConnectionString(builder.Configuration.GetConnectionString("MongoDbConnection")));

await DB.Index<Item>()
    .Key(x => x.Make, KeyType.Text)
    .Key(x => x.Model, KeyType.Text)
    .Key(x => x.Color, KeyType.Text)
    .CreateAsync();

-- appsettings.Development.json --
  "ConnectionStrings": {
    "MongoDbConnection": "mongodb://root:mongopw@localhost:27017"
  }

dotnet build
dotnet watch
ctrl+c


26. Adding seed data
open docker -> start the project AuctionService(dotnet watch)
open Postman -> Auctions -> GetAllAuctions -> copy the Response and 
paste it into SearchService -> Data -> Auctions.json

-- SearchService  -- 
Create New File: ctrl+N
Data-> Auctions.json (paste the JSON)

-> copy the code from Programs.cs relevant to the MongoDB
and paste it in DbInitializer.cs, in the static method

DbInitializer.cs
  -> create a static methods InitDB(WebApplication app)
  -> create the connection to the MongoDB 
  -> add key definition for the idex Item class
  -> both methods are await

-- Program.cs --
await DbInitializer.InitDb(app);

DB            -> the main entrypoint for all data access methods of the library
.InitAsync()  -> initializes a MongoDB connection with the given connection parameters
.Index<T>()   -> represents a index for a given IEntity
.Key()        -> add a key definition for the index

File.ReadAllTextAsync(" . . . ")
-> Asynchronously opens a text file, reads all the text in the file(json, xml, csv, txt)
, and then closes the file

new JsonSerializerOptions { PropertyNameCaseInsensitive = true }; 
-> Gets or sets a value that indicates whether a property's name 
uses a case-insensitive comparison during deserialization
-> the default value is false

ChatGPT:
"I have a C# line of code: "var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };" . What PropertyNameCaseInsensitive  does? give and example"

By default, if you try to deserialize this JSON into a Person object 
using JsonSerializer, the property names in the JSON must exactly 
match the property names in the C# class (case-sensitive) 


Modify Snippets -> ctrl + shift + p -> Configure User Snippets -> C#
	"Console Writeline":{
		"prefix":["cw"],
		"body": ["WriteLine($1);"],
		"description": "System.Console.WriteLine()"
	}


27. Adding a search controller

https://mongodb-entities.com/wiki/Entities.html

-- Controllers -> SearchController.cs --
-> create a SearchItems actionResult
  -> query the items form DB.
  -> sort by Make field
  -> .ExecuteAsync() the query
  -> return the results

Open Postman
-> Microservices NextJS -> Variables
  - variable: searchApi
  - initial value: http://localhost:7002 
  - current value: http://localhost:7002 

DB.Find<Item>()
  -> it will find all the items in the collection
  -> ex: "Ford", "Ford Audi"(will find all the cars with Ford and Audi)
         "FordAudi" (0 items) 


open docker
start containers
dotnet watch
create a new get request from postman: {{searchApi}}/api/search

-- SearchController.cs --
if (!string.IsNullOrEmpty(searchTerm))
{
    query.Match(Search.Full, searchTerm).SortByTextScore();
}

Match()     -> allows you to filter documents from a collection based on a specified condition
Search.Full -> represents a full-text search
            -> allows you to search for words or phrases in the entire text of a document, rather than just in specific fields
Search.Fuzzy-> allows the user to find text that is a “likely” match, meaning that misspelled words, typos, etc. in the desired term can be analyzed as matching user parameters.            
SortByTextScore() ->  The relevance score of a document is calculated based on how many times the search term appears in the 
                  document and how close the search term is to the beginning of the document.           

Postman:
-> create a GET method searching by filter
-> {{searchApi}}/api/search?searchTerm=Mustang


28. Paginating the results 

-- SearchController.cs --
-> add to SearchItems() pageNumber, pageSize(give them some default values)
-> change method DB.Find to DB.PageSearch
-> add pageNumber to query
-> add pageSize to query

return OK() with a new object {results =... , pageCount= ..., totalCount= ...}


Add 3 more Get All request in Postman:
-> with no parameters          : {{searchApi}}/api/search?pageNumber=2&pageSize=10
-> with pageSize and pageNumber: {{searchApi}}/api/search


29. Adding filtering and ordering 

-- RequestHelpers -> SearchParams.cs --
-> add prop : SearchTerm, PageNumber, PageSize, Seller, Winner, OrderBy, FilterBy
-> we are creating a class that is responsible for all the filters we apply on the page

-- SearchController.cs --
-> change the params with object: SearchParams.cs
-> use [FromQuery] 

-> add the:
  query = searchParams.OrderBy switch ...
  query = searchParams.FilterBy switch ...
  !string.IsNullOrEmpty(searchParams.Seller) ...
  !string.IsNullOrEmpty(searchParams.Winner) ...

_ -> it's a default parameter

Why we need the Seller and the Winner here ???

-> Postman tests
{{searchApi}}/api/search?seller=bob
{{searchApi}}/api/search?seller=tom
{{searchApi}}/api/search?winner=bob
{{searchApi}}/api/search?filterBy=finished
{{searchApi}}/api/search?filterBy=finished&seller=bob


30. Synchronous messaging 
-> definitions
-> examples


31. Adding Http communication to get the data

SearchService -> Data -> auctions.json
-> here we have all the auctions

-> first approach we use HTTP communication between SearchService and AuctionService
just to test the flow
-> this approach is a synchronies communication because services are dependent 
on each other
-> after this we take a look at a difference approach, the bus messaging approach,  
we will use the RabbitMQ(it's used more for local environments)
-> other tools like RabbitMQ: Amazon SQS, Azure Service Bus, Apache RocketMQ  

SearchService -> Data -> DbInitializer.cs
-> at this point on the course we are taking the data from a file: auctions.json
-> we want to get the data from AuctionService

-- ActionService -> Controller -> AuctionsController.cs --
-> we are changing the code

public async Task<ActionResult<List<AuctionDto>>> GetAllAuctions(string date){
  var query = _context.Auctions.OrderBy(x => x.Item.Make).AsQueryable();

  if (!string.IsNullOrEmpty(date))    
    query = query.Where(x => x.UpdateAt.CompareTo(
      DateTime.Parse(date).ToUniversalTime()) > 0);

  return await query.ProjectTo<AuctionDto>(_mapper.ConfigurationProvider).ToListAsync();
}

(7:00)
Test it:
-> Postman -> Section 2 -> Get all Auctions

cd ../SearchService
-- SearchService -> Services -> AuctionSvcHttpClient.cs --
-> get the UpdatedAt(Item.cs) from DB
-> sort it by Descending
-> convert UpdateAt to string
DB.Find<Item, string>()
  .Sort(. . .)
  .Project(. . .)
  .ExecuteFirstAsync();


-- SearchService -> appsettings.Development --
"AuctionServiceUrl":"http://localhost:7001"

-- SearchService -> Program.cs --
builder.Services.AddHttpClient<AuctionSvcHttpClient>();

-- DbInitializer.cs --
-> delete all of the if(count == 0) statement inside


delete the MongoDB container ( from Docker desktop)
docker compose up -d
docker volume list
docker volume rm 01fb53
dotnet watch (for AuctionService)
dotnet watch (for SearchService)

-- Dictionary --
.AsQueryable() -> Converts a generic System.Collections.Generic.IEnumerable`1 
                  to a generic System.Linq.IQueryable`1.

-> if we want to query something, the object that we take from the DB need to be of
type IQueryable
-> here: "var query = _context.Auctions.OrderBy(x => x.Item.Make)" the query is of 
type IOrderQueryable

"UpdateAt" is a field from the class Auctions

Examples with .AsQueryable:
var auctions = _auctionDbContext.Auctions
    .AsQueryable()
    .Where(x => x.IsOpen == true);

var auctions = _auctionDbContext.Auctions
  .AsQueryable()
  .OrderBy(x => x.StartTime);   

var auctionIds = _auctionDbContext.Auctions
    .AsQueryable()
    .Select(x => x.Id);


.ProjectTo<TDestination>    
-> extension method to project from a queryable using the provided mapping engine
-> it is a alternative example for _mapper.Map<Product,ProductDto>(product);

.Map<Source, Destination>(object source);

Examples:
(1)
var product = _context.Products.FirstOrDefault();
var summary = _mapper.Map<Product, ProductSummaryDto>(product);

(2)            
public IQueryable<AuctionDto> GetAuctions(string date)
{
    var auctions = _context.Auctions
        .Where(a => a.UpdatedAt.CompareTo(DateTime.Parse(date).ToUniversalTime()) > 0)
        .Select(a => _mapper.Map<Auction, AuctionDto>(a)
            .ForMember(a => a.Summary, opts => opts.MapFrom(a => a.Description)));

    return auctions;
}

(3)
public IQueryable<AuctionDto> GetAuctions(string date)
{
    var auctions = _context.Auctions
        .Where(a => a.UpdatedAt.CompareTo(DateTime.Parse(date).ToUniversalTime()) > 0)
        .Select(a => _mapper.Map<Auction, AuctionDto>(a));

    return auctions;
}



32. Making our Http communication resilient
docker compose down
docker compose up -d

Testing the resilient communication:
-> stop AuctionService
-> start SearchService
-> start AuctionService
  -> in the SearchService we still get 0 items

-> we need to restart the SearchService again so we can get back the data again

Is there a better approach?
-> use Polly
-> we use power 2 in seconds to call the AuctionService 
First call: 2^2, Second call: 2^3, Third call: 2^4, Fourth call: 2^5, Fifth call: 2^6, etc.

ctrl + shift + p -> Nuget gallery -> Microsoft.Extensions.Http.Polly

-- SearchService -> Program.cs --
builder.Services.AddHttpClient<AuctionSvcHttpClient>().AddPolicyHandler(GetPolicy());

(12:00)
app.Lifetime.ApplicationStarted.Register(async () =>
{
    try
    {
        await DbInitializer.InitDB(app);
    }
    catch (System.Exception ex)
    {
        WriteLine(ex);
    }
});

static IAsyncPolicy<HttpResponseMessage> GetPolicy()
    => HttpPolicyExtensions
        .HandleTransientHttpError()
        .OrResult(msg => msg.StatusCode == System.Net.HttpStatusCode.NotFound)
        .WaitAndRetryForeverAsync(_ => TimeSpan.FromSeconds(3));

-> AuctionService must be stop
-> start the SearchService
-> dotnet watch (the service will try to call the AuctionService)
-> start the AuctionService
-> all is good now  

33. Summary 
-> Creating a Search Service
-> Adding MongoDb
-> Sync communication between Services 
